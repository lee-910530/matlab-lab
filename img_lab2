import cv2
import matplotlib.pyplot as plt
import numpy as np

def canny(image):
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5,5), 0)
    canny = cv2.Canny(blur, 50, 150)
    return canny

def region_of_interest(image):
    height = image.shape[0]
    width = image.shape[1]
    mask = np.zeros_like(image)
    points = [(200, 650), (600,450), (680,400), (1200,650)]

    triangle = np.array([points], np.int32)
    cv2.fillPoly(mask, triangle, 255)
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image

def display_lines(image,lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                cv2.line(line_image,(x1,y1),(x2,y2),(255,0,0),10)
    return line_image

def make_points(image, line):
    slope, intercept = line
    y1 = int(image.shape[0])
    y2 = int(y1*3/5)
    x1 = int((y1-intercept)/slope)
    x2 = int((y2-intercept)/slope)
    return [[x1, y1, x2, y2]]

def average_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0:
                left_fit.append((slope,intercept))
            else:
                right_fit.append((slope,intercept))
    left_fit_average = np.average(left_fit, axis = 0)
    right_fit_average = np.average(right_fit, axis = 0)
    left_line = make_points(image, left_fit_average)
    right_line = make_points(image, right_fit_average)
    averaged_lines = [left_line, right_line]
    return averaged_lines


# def get_perspective_mat(src):
 
#     src_points = np.array([src[0], src[2], src[1], src[3]], dtype = "float32")
#     dst_points = np.array([src[0], src[2], [src[0][0], 100.], [src[2][0], 100.]], dtype = "float32")
 
#     M = cv2.getPerspectiveTransform(src_points, dst_points)
 
#     return M

def get_perspective_mat():
 
    src_points = np.array([src[0], src[2], src[1], src[3]], dtype = "float32")
    dst_points = np.array([src[0], [src[0][0], 270.], src[1], [src[1][0], 270]], dtype = "float32")
 
    M = cv2.getPerspectiveTransform(src_points, dst_points)
 
    return M


if __name__ == '__main__':
    img = cv2.imread('lab3.jpg', -1)
    img_show = np.copy(img)
    lane_image = np.copy(img)
    canny_image = canny(lane_image)
    # cv2.imshow("step 1", canny_image)
    cropped_canny = region_of_interest(canny_image)
    # cv2.imshow("step 2", cropped_canny)
    lines = cv2.HoughLinesP(cropped_canny, 2, np.pi / 180, 100, np.array([]), minLineLength=40, maxLineGap=5)
    # cv2.imshow("Result", display_lines(lane_image, lines))

    averaged_lines = average_slope_intercept(img, lines)

    arr = np.array(averaged_lines)
    point = arr.reshape(4, 2)

    up_left = ((point[0] + 3*point[1])/4).astype(int)
    up_right = ((point[2] + 3*point[3])/4).astype(int)
    down_left = ((3*point[0] + point[1])/4).astype(int)
    down_right = ((3*point[2] + point[3])/4).astype(int)
    
    img = cv2.circle(img,up_left,1,(0,255,0),5)
    img = cv2.circle(img,up_right,1,(0,255,0),5)
    img = cv2.circle(img,down_left,1,(0,255,0),5)
    img = cv2.circle(img,down_right,1,(0,255,0),5)
    
    src_points = np.array([down_left,down_right,up_left,up_right], dtype = "float32")
    dst_points = np.array([[400,720],[800,720],[400,300],[800,300]], dtype = "float32")
    M = cv2.getPerspectiveTransform(np.float32(src_points), dst_points)
    print(M)
    perspective = cv2.warpPerspective(img, M, (1200, 800), cv2.INTER_LINEAR)
 

    cv2.imshow("dfdf", perspective)

    cv2.waitKey(0)
    cv2.destroyAllWindows()
